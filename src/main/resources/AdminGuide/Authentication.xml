<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>AdminGuide</web>
  <name>Authentication</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>AdminGuide.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1174767487000</creationDate>
  <date>1360950259000</date>
  <contentUpdateDate>1360950259000</contentUpdateDate>
  <version>1.1</version>
  <title>User Authentication</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.TagClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <tags>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>tags</name>
        <number>1</number>
        <prettyName>Tags</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator>|</separator>
        <separators>|,</separators>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </tags>
    </class>
    <name>AdminGuide.Authentication</name>
    <number>0</number>
    <className>XWiki.TagClass</className>
    <guid>58b34f13-d07c-4bd6-837d-a2aaab0d2889</guid>
    <property>
      <tags/>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>AdminGuide.Authentication</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>7d841b5e-66c7-4f81-8a4f-ea200070924f</guid>
    <property>
      <allow/>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels/>
    </property>
    <property>
      <users/>
    </property>
  </object>
  <content>XWiki supports several different authentication mechanisms for authenticating users:

{{toc/}}

{{info}}
XWiki currently allows only one method of authentication to be enabled at a time. This will probably be improved in the future.
{{/info}}

= Form Authentication =

Form authentication is the default way to get authenticated within a Wiki. It requires a user and a password.

= Basic Authentication =

XWiki supports [[basic access authentication&gt;&gt;http://en.wikipedia.org/wiki/Basic_access_authentication]], a method designed to allow a web browser or other client programs to provide credentials - in the form of a user name and password - when making a request. You can get authenticated against an XWiki server with the basic authentication protocol using the following URL scheme:

{{code}}
http://username:password@mywiki.xwiki.com/xwiki/bin/view/Main/WebHome?basicauth=1
{{/code}}

{{warning}}
Be careful that if you use the ##HTTP## protocol your password will be sent in clear over the network and is thus very unsafe. When using basic authentication you should make sure your wiki is configured to use ##HTTPS##.
{{/warning}}

= Social Login =

See the [[Social Login Application&gt;&gt;extensions:Extension.Social Login Application]].

= LDAP Authentication =

== Generic LDAP configuration ==

In order to enable the LDAP support you have to change the authentication method in //WEB-INF/xwiki.cfg// as follows:

{{code language="properties"}}
#-# LDAP authentication service
# xwiki.authentication.authclass=com.xpn.xwiki.user.impl.LDAP.XWikiLDAPAuthServiceImpl

#-# Turn LDAP authentication on - otherwise only XWiki authentication
#-# - 0: disable
#-# - 1: enable
#-# The default is 1
# xwiki.authentication.ldap=1
{{/code}}

You can setup the LDAP configuration in the **xwiki.cfg** file by filling the following properties:

{{code language="properties"}}
#-# LDAP Server (Active Directory, eDirectory, OpenLDAP, etc.)
xwiki.authentication.ldap.server=127.0.0.1
xwiki.authentication.ldap.port=389

#-# LDAP login, empty = anonymous access, otherwise specify full dn
#-# {0} is replaced with the user name, {1} with the password
xwiki.authentication.ldap.bind_DN=cn={0},department=USER,department=INFORMATIK,department=1230,o=MP
xwiki.authentication.ldap.bind_pass={1}

#-# The Base DN used in LDAP searches
xwiki.authentication.ldap.base_DN=

#-# LDAP query to search the user in the LDAP database (in case a static admin user is provided in
#-# xwiki.authentication.ldap.bind_DN)
#-# {0} is replaced with the user uid field name and {1} with the user name
#-# The default is ({0}={1})
# xwiki.authentication.ldap.user_search_fmt=({0}={1})

#-# Only members of the following group will be verified in the LDAP
#-# otherwise only users that are found after searching starting from the base_DN
# xwiki.authentication.ldap.user_group=cn=developers,ou=groups,o=MegaNova,c=US

#-# [Since 1.5RC1, XWikiLDAPAuthServiceImpl]
#-# Only users not member of the following group can autheticate
# xwiki.authentication.ldap.exclude_group=cn=admin,ou=groups,o=MegaNova,c=US

#-# Specifies the LDAP attribute containing the identifier to be used as the XWiki name
#-# The default is cn
# xwiki.authentication.ldap.UID_attr=cn

#-# [Since 1.5M1, XWikiLDAPAuthServiceImpl]
#-# The potential LDAP groups classes. Separated by commas.
# xwiki.authentication.ldap.group_classes=group,groupOfNames,groupOfUniqueNames,dynamicGroup,dynamicGroupAux,groupWiseDistributionList

#-# [Since 1.5M1, XWikiLDAPAuthServiceImpl]
#-# The potential names of the LDAP groups fields containings the members. Separated by commas. 
# xwiki.authentication.ldap.group_memberfields=member,uniqueMember

#-# retrieve the following fields from LDAP and store them in the XWiki user object (xwiki-attribute=ldap-attribute)
xwiki.authentication.ldap.fields_mapping=last_name=sn,first_name=givenName,email=mail

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# On every login update the mapped attributes from LDAP to XWiki otherwise this happens only once when the XWiki
#-# account is created.
#-# - 0: only when creating user
#-# - 1: at each authentication
#-# The default is 0
xwiki.authentication.ldap.update_user=1

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# Maps XWiki groups to LDAP groups, separator is "|". The following kind of groups are supported:
#-# * LDAP static groups (users/subgroups are listed statically in the group object)
#-# * [Since 3.3M1] LDAP organization units (users/subgroups are sub object of the provided organization unit)
#-# * [Since 3.3M1] LDAP filter (users/groups are object found in a search with the provided filter),
#-#   | character in the filter need to be escaped with backslash (\).
#-#
#-# Here is an example:
# xwiki.authentication.ldap.group_mapping=XWiki.XWikiAdminGroup=cn=AdminRole,ou=groups,o=domain,c=com|\
#                                         XWiki.LDAPUsers=ou=groups,o=domain,c=com|\
#                                         XWiki.Organisation=(cn=testers)

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# Time in s after which the list of members in a group is refreshed from LDAP
#-# The default is 21600 (6 hours)
# xwiki.authentication.ldap.groupcache_expiration=21600

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# - create : synchronize group membership only when the user is first created
#-# - always: synchronize on every login
#-# The default is always
# xwiki.authentication.ldap.mode_group_sync=always

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# If ldap authentication fails for any reason, try XWiki DB authentication with the same credentials
#-# - 0: disable
#-# - 1: enable
#-# The default is 0
xwiki.authentication.ldap.trylocal=1

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# SSL connection to LDAP server
#-# - 0: normal
#-# - 1: SSL
#-# The default is 0
# xwiki.authentication.ldap.ssl=0

#-# [Since 1.3M2, XWikiLDAPAuthServiceImpl]
#-# The keystore file to use in SSL connection
# xwiki.authentication.ldap.ssl.keystore=

#-# [Since 1.5M1, XWikiLDAPAuthServiceImpl]
#-# The java secure provider used in SSL connection
#-# The default is com.sun.net.ssl.internal.ssl.Provider
# xwiki.authentication.ldap.ssl.secure_provider=com.sun.net.ssl.internal.ssl.Provider

#-# Bypass standard LDAP bind validation by doing a direct password comparison.
#-# If you don't know what you do, don't use that. It's covering very rare and bad use cases.
#-# - 0: disable
#-# - 1: enable
#-# The default is 0
# xwiki.authentication.ldap.validate_password=0

#-# [Since 1.5M1, XWikiLDAPAuthServiceImpl]
#-# Specifies the LDAP attribute containing the password to be used "when xwiki.authentication.ldap.validate_password"
#-# is set to 1
# xwiki.authentication.ldap.password_field=userPassword

#-# [Since 4.3M1, XWikiLDAPAuthServiceImpl]
#-# The maximum number of milliseconds the client waits for any operation under these constraints to complete.
#-# The default is 1000
# xwiki.authentication.ldap.timeout=1000
{{/code}}

{{info}}
You can also setup the LDAP configuration in the XWiki.XWikiPreferences page by going to the object editor. Simply replace **xwiki.authentication.ldap.** with **ldap_**. For example ##xwiki.authentication.ldap.base_DN## becomes ##ldap_base_DN##.
{{/info}}

For testing purposes, you may wish to omit the "ldap.fields_mapping" field, to test the authentication first, and then add it later to get the mappings right.

Here are some LDAP clients for checking your configuration:

Java based and Open Source:

* [[Apache Directory Studio&gt;&gt;http://directory.apache.org/studio/]]
* [[JXplorer&gt;&gt;http://jxplorer.org/]]

Windows only:

* [[Softerra LDAP Browser&gt;&gt;http://www.ldapbrowser.com/info_softerra-ldap-browser.htm]]

== Detailed use cases ==

See the [[LDAP configuration uses cases&gt;&gt;LDAPAuthenticationUseCases]] for some detailed use cases.

== Enable LDAP debug log ==

See [[AdminGuide.Logging]].

The specific packages to track for LDAP are ##com.xpn.xwiki.plugin.ldap## and ##com.xpn.xwiki.user.impl.LDAP##.

In XWiki 3.4 you need to add the following in ##WEB-INF/classes/logback.xml##:

{{code}}
&lt;!-- LDAP debugging --&gt;
&lt;logger name="com.xpn.xwiki.plugin.ldap" level="trace"/&gt;
&lt;logger name="com.xpn.xwiki.user.impl.LDAP" level="trace"/&gt;
{{/code}}

Before 3.1, add the following to the log4j configuration file:

{{code}}
log4j.logger.com.xpn.xwiki.plugin.ldap=trace
log4j.logger.com.xpn.xwiki.user.impl.LDAP=trace
{{/code}}

= eXo Authentication =

The eXo authentication is used automatically by adding/editing the //xwiki.exo=1// property in //WEB-INF/xwiki.cfg//.

= Custom Authentication =

This allows plugging to any existing authentication mechanism such as SiteMinder, etc. To configure a custom authentication do the following:

1. Implement the {{scm path="xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/api/XWikiAuthService.java"}}XWikiAuthService{{/scm}} interface.
1. Edit the //WEB-INF/xwiki.cfg// file and add a //xwiki.authentication.authclass// property pointing to your class. For example:

{{code language="properties"}}
xwiki.authentication.authclass = com.acme.MyCustomAuthenticationService
{{/code}}

You can find various [[authenticators examples&gt;&gt;https://github.com/xwiki-contrib/sandbox/tree/master/authenticators]].

Here's a [[tutorial on implementing a custom authentication class for authenticating against Oracle's SSO&gt;&gt;http://bodez.wordpress.com/2008/10/15/xwiki-user-authentication-with-oracle-sso/]].

Note, that you can also implement own right management service by implementing the {{scm path="xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/api/XWikiRightService.java"}}XWikiRightService{{/scm}} interface:

{{code language="properties"}}
xwiki.authentication.rightsclass = com.acme.MyCustomRightsService
{{/code}}

and Group Service by implementing {{scm path="xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/api/XWikiGroupService.java"}}XWikiGroupService{{/scm}}:

{{code language="properties"}}
xwiki.authentication.groupclass = com.acme.MyCustomGroupService
{{/code}}

== Custom Authentication using a Groovy script in a wiki page ==

Start by specifying you want to use the Groovy Authenticator:

{{code language="properties"}}
xwiki.authentication.authclass = com.xpn.xwiki.user.impl.xwiki.GroovyAuthServiceImpl
{{/code}}

Then add another configuration parameter to specify in which wiki page the authenticator is:

{{code language="properties"}}
xwiki.authentication.groovy.pagename = MySpace.MyPage
{{/code}}

Then put some Groovy code in a wiki page that returns a XWikiAuthService object.

= Authentication parameters =

You can set each of these parameters by setting:

{{code}}
xwiki.authentication.~~param_name~~=~~param_value~~
{{/code}}

|=Name|=Optional|=Allowed values|=Default value|=Description
|encryptionKey|No(1)|?|n/a|Set the Encryption Key used to create a secret key, the secret key is passed to the Cipher object to be used during encryption and decryption of cookie values.
|validationKey|No(2)|?|n/a|Set the Validation Key used to generate hash value; the hash value is stored with the cookie and used to verify that the cookie has not been tampered with.
|cookiedomains|Yes|String|Server host name|Which host(s) should your cookies be sent to; use only if you want to share cookies across domains, otherwise should be commented out
|cookielife|Yes|Number|14|Number of days cookies take to expire
|cookiepath|Yes|String|/|The webapp path that XWiki cookies should be sent to; if you have anything else running on your web server, this should be set to ///xwiki//
|default_page|Yes|String|/bin/view/ Main/WebHome|Page to redirect to if xredirect parameter is not set
|encryptionalgorithm|Yes|?|?|Set the Encryption Algorithm used to encrypt and decrypt cookies
|encryptionmode|Yes|?|?|Set the Encryption Mode used to encrypt and decrypt cookies
|encryptionpadding|Yes|?|?|Set the Encryption Padding used to encrypt and decrypt cookies
|errorpage|Yes|String|/bin/loginerror/ XWiki/XWikiLogin|Page to redirect to if there is an error logging in
|loginpage|Yes|String|/bin/login/ XWiki/XWikiLogin|Page to redirect to when not logged in
|loginsubmitpage|Yes|String|/loginsubmit/ XWiki/XWikiLogin|The URL where the username and password are posted to when logging in.
|logoutpage|Yes|String|/bin/logout/ XWiki/XWikiLogout|Page to redirect to after logged out
|realmname|Yes|String|XWiki|Sets the realm name
|protection|Yes|all, validation, encryption, none|all|Protection level for the "remember me" cookie functionality
|unauthorized_code|Yes|Number|401|The HTTP status code to return when the login has failed.
|useip|Yes|true / false|true|Specify to use the IP address when encrypting the cookie data; if IP address changes will need to re-login.

1. Only required if protection = encryption or all (default)
1. Only required if protection = validation or all (default)

= Kerberos SSO Authentication =

{{warning}}
This implementation of SSO is currently under review see: http://jira.xwiki.org/jira/browse/XWIKI-2496 . The class which is described in this segment of documentation, AppServerTrustedKerberosAuthServiceImpl, is not part of the default XWiki distribution!
{{/warning}}

The following is an example of **mod_auth_kerb** for Apache being used to easily implement XWiki authentication of users via HTTP Negotiate on a linux server. This example assumes you already have a working Apache2 HTTPD and Apache Tomcat setup with mod_jk.

First of all you need to create a principal and keytab for the webserver:

{{code}}
# kadmin
kadmin&gt; addprinc -randkey HTTP/wiki.example.com
kadmin&gt; ktadd -k /etc/apache2/ssl/wiki.keytab HTTP/wiki.example.com
kadmin&gt; quit
{{/code}}

Make sure the keytab has the right permissions and ownership:

{{code}}
chown www-data:www-data /etc/apache2/ssl/wiki.keytab
chmod 400 /etc/apache2/ssl/wiki.keytab
{{/code}}

Install **mod_auth_kerb** in your linux installation. On Debian or Ubuntu this would be achieved by running:

{{code}}
aptitude install libapache2-mod-auth-kerb
{{/code}}

Of course the installation procedure varies per Linux distribution.

If your xwiki installation is mounted in Apache HTTPD under /xwiki, add the following to the virtual host configuration:

{{code}}
&lt;Location /xwiki/&gt;
  AuthType Kerberos
  AuthName "Kerberos Login"
  KrbAuthRealms EXAMPLE.COM
  Krb5Keytab "/etc/apache2/ssl/wiki.keytab"
  KrbMethodK5Passwd off
  KrbMethodNegotiate on
  KrbSaveCredentials on
  require valid-user
&lt;/Location&gt;
{{/code}}

Make sure Apache Tomcat uses the authentication performed by Apache HTTPD with the "tomcatAuthentication" property in the connector description (which is in the **server.xml** file of Apache Tomcat):

{{code}}
&lt;Connector port="8009" address="127.0.0.1" enableLookups="false" tomcatAuthentication="false" redirectPort="8443" protocol="AJP/1.3" /&gt;
{{/code}}

Place the **authkerb.jar** jar in the ##WEB-INF/lib## directory of XWiki in Apache Tomcat.

Have Xwiki use the authentication module by changing the "xwiki.authentication.authclass" property in the ##WEB-INF/lib/xwiki.cfg## file.

{{code}}
xwiki.authentication.authclass=com.xpn.xwiki.user.impl.xwiki.AppServerTrustedKerberosAuthServiceImpl
{{/code}}

If you use Firefox, do not forget to whitelist the xwiki URL for HTTP Negotiate in about:config with the "network.negotiate-auth.trusted-uris" property. Possible values for this property include: //https:~/~/// for all secured connections or **example.com** for all example.com subdomains.

When I used JBoss SPNEGO (Kerberos in combination with LDAP) I changed the code of the **XWikiLDAPAuthServiceImpl** to be able to detect the sso user. The authenication already happend by using the SPNEGO module (JAAS). After that I'm using the ldap synchronisation feature to make sure that the user is up to date. The combination leads to an automatic login in XWiki and the user rights are controlled in the Active Directory server. I hope you can adopt this code or that you can use it for your own projects.

The configuration of ldap:

{{code}}
xwiki.authentication.authclass=com.wiki.sso.SSOLdapAuthenicationImpl
xwiki.authentication.ldap=1
xwiki.authentication.ldap.server=&lt;ad-server&gt;
xwiki.authentication.ldap.port=389
xwiki.authentication.ldap.base_DN=&lt;OU=Users,...............&gt;
#use a fixed user to attach to the ldap database,
#the password is not provided with the SSOLdapAuthenicationImpl
xwiki.authentication.ldap.bind_DN=&lt;domain&gt;\\&lt;user&gt;
xwiki.authentication.ldap.bind_pass=&lt;password&gt;
#Microsoft AD configuration
xwiki.authentication.ldap.UID_attr=sAMAccountName
xwiki.authentication.ldap.fields_mapping=name=sAMAccountName,last_name=sn,first_name=givenName,fullname=displayName,mail=mail,ldap_dn=dn
xwiki.authentication.ldap.group_memberfields=member,uniqueMember
#LDAP group mapping
xwiki.authentication.ldap.group_mapping=XWiki.XWikiAdminGroup=CN=WIKI_Admin,............|\
                                        XWiki.XWikiAllGroup=CN=WIKI_User,...........
{{/code}}

The java code:

{{code}}
package com.wiki.sso;


import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.XWikiException;
import com.xpn.xwiki.user.api.XWikiUser;
import com.xpn.xwiki.user.impl.LDAP.XWikiLDAPAuthServiceImpl;

import java.security.Principal;

public class SSOLdapAuthenicationImpl extends XWikiLDAPAuthServiceImpl {
    /**
     * Logging tool.
     */
    private static final Log LOG = LogFactory.getLog(SSOLdapAuthenicationImpl.class);


	public XWikiUser checkAuth(XWikiContext context) throws XWikiException {
		String user = getRemoteUser(context);
		if ((user != null) || !user.equals("")) {
			if (LOG.isInfoEnabled())
				LOG.info("Launching create user for " + user);
			if ( authenticate(user, context) != null ) {
				if (LOG.isInfoEnabled())
					LOG.info("Create user done for " + user);
				user = "XWiki." + user;
				context.setUser(user);
				System.out.println("User is set to:" + user);
				return new XWikiUser(user);
			} else {
				LOG.error( "User " + user + " can't be authenticated against ldap" );
			}
		}
		return super.checkAuth(context);
	}

	/**
	 * We cannot authenticate locally since we need to trust the app server for
	 * authentication
	 *
	 * @param username
	 * @param password
	 * @param context
	 * @return
	 * @throws XWikiException
	 */
	public XWikiUser checkAuth(String username, String password,
			String rememberme, XWikiContext context) throws XWikiException {
		String user = getRemoteUser(context);
		if ((user == null) || user.equals("")) {
			return super.checkAuth(username, password, rememberme, context);
		}
		return checkAuth(context);
	}

	private String getRemoteUser(XWikiContext context) {
		String userName = context.getRequest().getHttpServletRequest()
				.getRemoteUser();
		if (userName != null) {
			// only take the front of the username@domain
			String[] elements = userName.split("@", 2);
			userName = elements[0];
		}
		return userName;
	}

    public Principal authenticate(String login, XWikiContext context) throws XWikiException
    {
        if (LOG.isTraceEnabled()) {
            LOG.trace("Starting LDAP authentication");
        }

        /*
         * TODO: Put the next 4 following "if" in common with XWikiAuthService to ensure coherence This method was
         * returning null on failure so I preserved that behaviour, while adding the exact error messages to the context
         * given as argument. However, the right way to do this would probably be to throw XWikiException-s.
         */

        if (login == null) {
            // If we can't find the username field then we are probably on the login screen

            if (LOG.isDebugEnabled()) {
                LOG.debug("The provided user is null."
                    + " We don't try to authenticate, it probably means the user is in non logged mode.");
            }

            return null;
        }

        // Check for empty usernames
        if (login.equals("")) {
            context.put("message", "nousername");

            if (LOG.isDebugEnabled()) {
                LOG.debug("LDAP authentication failed: login empty");
            }

            return null;
        }

        // If we have the context then we are using direct mode
        // then we should specify the database
        // This is needed for virtual mode to work
        Principal principal = null;

        // Try authentication against ldap
        principal = ldapAuthenticate(login, "", context);

        if (LOG.isDebugEnabled()) {
            if (principal != null) {
                LOG.debug("LDAP authentication succeed with principal [" + principal.getName() + "]");
            } else {
                LOG.debug("LDAP authentication failed for user [" + login + "]");
            }
        }

        return principal;
    }
}
{{/code}}</content>
</xwikidoc>
